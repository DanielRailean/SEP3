@page "/"
@using WebApp.Models
@using WebApp.Data
@using MudBlazor

@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using global::Models
@using Microsoft.AspNetCore.Components
@using WebApp.Pages.Customer

@inject IRecipeService RecipeService
@inject IBasketService BasketService
@inject NavigationManager NavigationManager

<h1>Welcome to GodEats!</h1>

<p> We are offering several variety of recipes from the best ingredient suppliers. </p>
<p> Calories are counted for every 100 g of intake. </p>

@if (recipesToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!recipesToShow.Any())
{
    <p>
        <em>No recipes found.</em>
    </p>
}
else
{
    <h1>@error</h1>

    <MudGrid>
        @foreach (Recipe item in recipesToShow)
        {
            <MudItem xs="20">
                    <MudGrid Justify="Justify.SpaceBetween">
                        <MudCard>
                            <MudCardContent @bind-Value="recipe">
                                <MudCardMedia Image="@item.Image"/>
                                <MudText>@item.Name</MudText>
                                <MudText>@item.Price</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudNumericField @bind-Value="item.Amount" Label="Amount" Color="Color.Primary"/>
                                <MudButton @onclick="() => ShowRecipeDetails(item)" Variant="Variant.Filled" Color="Color.Tertiary">More</MudButton>
                                <MudButton @onclick="() => AddToBasket(item)" Variant="Variant.Filled" Color="Color.Primary">Add to basket</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudGrid>
                </MudItem>
        }
    </MudGrid>
}

@code {
    private IList<Recipe> recipesToShow = new List<Recipe>();
    private IList<BasketItem> UserBasketItems = new List<BasketItem>();
    private Recipe recipe;
    [Required, Range(1, 10)]

    private int counter;

    private string error;

    protected override async Task OnInitializedAsync()
    {
        recipesToShow = await RecipeService.GetAllRecipesAsync();
    }

    private void AddToBasket(Recipe recipe)
    {
        BasketItem item = new BasketItem(recipe.Amount,recipe.Id);
        if (item.Amount < 1)
        {
            error = "Please select at least one piece to add to cart.";
            recipe.Amount = 0;
            return;
        }
        error = "";
        BasketService.AddRecipe(item);
        if (!containsRecipe(UserBasketItems, item))
        {

            BasketItem toAdd = new BasketItem(item.Amount, item.RecipeId);
            UserBasketItems.Add(toAdd);
        }
        else
        {
            UserBasketItems.FirstOrDefault(i => i.RecipeId == item.RecipeId).Amount+=item.Amount;
        }
        recipe.Amount = 0;
        Console.WriteLine(JsonSerializer.Serialize(UserBasketItems));
    }

    private bool containsRecipe(IList<BasketItem> basketItems,BasketItem item)
    {
        return (basketItems.FirstOrDefault(i => i.RecipeId == item.RecipeId)!=null);
    }

    private void ShowRecipeDetails(Recipe item)
    {
        NavigationManager.NavigateTo($"/recipedetail/{item.Id}");
    }
}