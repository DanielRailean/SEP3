@page "/"
@using WebApp.Models
@using WebApp.Data
@using MudBlazor

@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using global::Models
@using Microsoft.AspNetCore.Components
@using WebApp.Pages.Customer

@inject IRecipeService RecipeService
@inject IBasketService BasketService
@inject NavigationManager NavigationManager

<h1>Welcome to GodEats!</h1>

<p> We are offering several variety of recipes from the best ingredient suppliers. </p>
<p> Calories are counted for every 100 g of intake. </p>

@if (recipesToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!recipesToShow.Any())
{
    <p>
        <em>No recipes found.</em>
    </p>
}
else
{
    <h1>@error</h1>
    <MudGrid>
        @foreach (Recipe item in recipesToShow)
        {
            <MudItem xs="20">
                    <MudGrid Justify="Justify.SpaceBetween">
                        <MudCard>
                            <MudCardContent @bind-Value="recipe">
                                <MudCardMedia Image="@item.Image"/>
                                <MudText>@item.Name</MudText>
                                <MudText>@item.Price</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudNumericField @bind-Value="item.Amount" Label="Amount" Color="Color.Primary"/>
                                <MudButton @onclick="() => ShowRecipeDetails(item)" Variant="Variant.Filled" Color="Color.Tertiary">More</MudButton>
                                <MudButton @onclick="async() => await AddToBasket(item)" Variant="Variant.Filled" Color="Color.Primary">Add to basket</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudGrid>
                </MudItem>
        }
    </MudGrid>
    <h5>
        Cart contents: @cartContents;
        <br>
        <br>
    </h5>
}

@code {
    private IList<Recipe> recipesToShow = new List<Recipe>();
    private Recipe recipe;
    [Required, Range(1, 10)]

    private int counter;

    private string error;
    private string cartContents;

    protected override async Task OnInitializedAsync()
    {
        recipesToShow = await RecipeService.GetAllRecipesAsync();
        await updateBasket();
    }

    private async Task AddToBasket(Recipe recipe)
    {
        try
        {
            await BasketService.AddRecipe(recipe);
        }
        catch (Exception e)
        {
            error = e.Message;
        }
        // recipe.Amount = 0;
        await updateBasket();
    }

    private async Task updateBasket()
    {
        cartContents = JsonSerializer.Serialize(await BasketService.GetAllBasketItems());
    }
      
    private void ShowRecipeDetails(Recipe item)
    {
        NavigationManager.NavigateTo($"/recipedetail/{item.Id}");
    }
}