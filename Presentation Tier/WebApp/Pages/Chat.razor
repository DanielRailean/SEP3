@page "/Chat"
@using WebApp.Models
@using WebApp.Authentication
@using WebApp.Data
@using Blazored.SessionStorage
@using System.Text.Json
@using System.Timers
@attribute [Authorize]
@using Blazored.LocalStorage
@implements IDisposable;


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IJSRuntime JSRuntime
@inject ISessionStorageService sessionStorage;
@inject ILocalStorageService localStorage;
@inject IChatService ChatService;

<h3>Chat</h3>
<AuthorizeView Policy="Admin">
    @if (displayRooms)
    {
        @if (chatRooms != null)
        {
            <table class="table">
                <thead class="thead-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">UserName</th>
                    <th scope="col">AdminName</th>
                    <th scope="col">Problem</th>
                    <th scope="col">Status</th>
                    <th scope="col">RoomId</th>
                    <th scope="col">Connect</th>
                    <th scope="col">Answered</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var chatRoom in chatRooms)
                {
                    <tr>
                        <th scope="row">@chatRooms.IndexOf(chatRoom)</th>
                        <td>@chatRoom.Customer.FullName</td>
                        <td>@chatRoom.Admin.FullName</td>
                        <td>@chatRoom.Question</td>
                        <td>@chatRoom.Status</td>
                        <td>@chatRoom.Id</td>
                        <td>
                            <button type="button" class="btn btn-success" @onclick="async () => await ConnectToRoom(chatRoom.Id)">Connect</button>
                        </td>
                        @if (chatRoom.Messages.Any())
                        {
                            <td>@chatRoom.Messages[^1].IsAdminMessage</td>
                        }
                    </tr>
                }
                </tbody>

            </table>
        }
        else
        {
            <p>No chat rooms</p>
        }
    }
    @if (displayHelpNext)
    {
        <button @onclick="async () => await HelpNextUser()" type="button" class="btn btn-primary" display="none">Help next user</button>

    }
    @if (displayRefresh)
    {
        <button @onclick="async () => await FetchChatRooms()" type="button" class="btn btn-success" display="none">Refresh</button>

    }
    @if (displayExitRoom)
    {
        <button @onclick="async () => await ExitRoom()" type="button" class="btn btn-warning" display="none">ExitRoom</button>

    }
    

</AuthorizeView>
<h4>Status: @notification</h4>
<div class="row">
    @if (displayConnect)
    {
        <button type="button" class="btn btn-success" @onclick="async () => await ConnectToChat()">Connect to chat</button>

    }
    @if (displayReconnect)
    {
        <button type="button" class="btn btn-secondary" @onclick="async () => await ReconnectToChat()">Reconnect to chat</button>

    }
    @if (displayDisconnect)
    {
        <button type="button" class="btn btn-warning" @onclick="async () => await Disconnect()">Disconnect</button>

    }
    @if (displayAskQuestion)
    {
        <button type="button" class="btn btn-warning" @onclick="async () => await AskQuestion()">Ask question</button>

    }
    @if (displayCloseRoom)
    {
        <button type="button" class="btn btn-danger" @onclick="async () => await CloseChatRoom()">Close chat room</button>

    }
</div>
<div class="row">
    @if (displayInputField)
        {
            <textarea class="form-control" aria-label="Message"  @bind="message"></textarea>
        }
    @if (displaySendMessage)
    {
        <button type="button" class="btn btn-primary" @onclick="async () => await SendMessage()">Send Message</button>

    }
    </div>
<ul class="list-group" id="messagesList">
    @if (currentRoom!=null)
    {
        <h3>Messages:</h3>
        foreach (var item in currentRoom.Messages)
        {
            <li class="list-group-item">@item.Sender said @item.Body</li>
        }
    }
</ul>

@code {
    // used for countdown for reconnection
    // public int reconnectRetry = 1;
    //used for repeatedly updating the user status
    // public int RecursiveUpdate = 1;
    //used to keep track number of this page updates
    // public int update;

    //uset to store the current connected user
    User currentUser;
    // private string connectionCoockie = "connectionC";
    // private string connectionId;
    private string message;
    private string notification = "None";
    // private string ButtonValue;
    // private string connectButton = "Press To Connect";
    // private string ButtonClass = "btn btn-success";
    // private ChatRoom room;
    IList<Message> messages = null;
    IList<ChatRoom> chatRooms = null;
    ChatUser chatUser;
    ChatRoom currentRoom;
    private int userStatus;
    private bool displayHelpNext;
    private bool displayRefresh;
    private bool displayExitRoom;
    private bool displayConnect;
    private bool displayReconnect;
    private bool displayDisconnect;
    private bool displayAskQuestion;
    private bool displayCloseRoom;
    private bool displaySendMessage;
    private bool displayInputField;
    private bool displayRooms;
    private int updateStatusDelay =1 ; // in 100 msseconds => 10 = 1 second = 1000ms
    // private bool started;
    // private bool disposed;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).GetUser();
        await JSRuntime.InvokeVoidAsync("EstablishConnection");
        if (await localStorage.GetItemAsync<bool>("started"))
        {
            Console.WriteLine("Started");
            await ReconnectToChat();
        }
        Console.WriteLine("initialised  user status" + userStatus);
    /*if (currentUser.SecurityLevel == 2)
        {
            chatRooms = await ChatService.GetChatRooms();
        }*/
    /*GetUpdates();
    // started = await localStorage.GetItemAsync<bool>("startedChat");
        if (currentUser.SecurityLevel == 2 && !started)
        {
            ButtonValue = "Send message";
            chatRooms = await ChatService.GetChatRooms();
            if (chatRooms != null)
            {
                Console.WriteLine("got rooms");
                Console.WriteLine(JsonSerializer.Serialize(chatRooms));
            }
            StateHasChanged();
        }
        else
        {
            ButtonValue = "Ask question";
        }
        if (started)
        {
            await JSRuntime.InvokeVoidAsync("ReconnectJS", currentUser.id, currentUser.SecurityLevel == 2);
            await ConnectToChat();
            CountDownRetry();
        }
        StateHasChanged();*/
        await UpdateUserStatus();
        StateHasChanged();
    }

    public async Task ReconnectToChat()
    {
        await JSRuntime.InvokeVoidAsync("ReconnectToChatJS", currentUser.id);
        Console.WriteLine("reconnect to chat");
        await UpdateUserStatus();
    }

    public async Task UpdateUserStatus()
    {
        while (updateStatusDelay > 0)
        {
            updateStatusDelay--;
            await Task.Delay(100);
        }
        // await UpdateUserStatus();
        userStatus = await ChatService.GetUserStatus(currentUser.id);
        Console.WriteLine("updated status: " + userStatus);
        await UpdateUI();
        updateStatusDelay = 1;
    }

    
    /*
    displayHelpNext =
    displayRefresh =
    displayExitRoom =
    displayReconnect =
    displayDisconnect =
    displayAskQuestion =
    displayCloseRoom =
    displayInputField =
    displaySendMessage = 
    displayConnect =
    displayRooms =
    */
    
    public async Task UpdateUI()
    {
        
        if (userStatus == 0)
        {
            displayHelpNext =
                    displayRefresh =
                        displayExitRoom =
                                displayReconnect =
                                    displayDisconnect =
                                        displayAskQuestion =
                                            displayCloseRoom =
                                                displayInputField =
                                                    displaySendMessage = false;
            displayConnect = true;

        }
        else if (userStatus == 1)
        {
            displayAskQuestion = displayInputField =displayDisconnect= true;
            displayHelpNext =
                displayRefresh =
                    displayExitRoom =
                        displayReconnect =
                            displayCloseRoom =
                                    displaySendMessage =
                                        displayConnect = false;
        }
        else if (userStatus == 2)
        {
            displaySendMessage = displayInputField =displayDisconnect= displayCloseRoom = true;
            displayHelpNext =
                displayRefresh =
                    displayExitRoom =
                        displayReconnect =
                            displayConnect = 
                                displayAskQuestion = false;
        }
        else if (userStatus == 3)
        {
            displayReconnect = true;
            displayHelpNext =
                displayRefresh =
                    displayExitRoom =
                        displayDisconnect =
                                displayAskQuestion =
                                    displayCloseRoom =
                                        displayInputField =
                                            displaySendMessage =
                                                displayConnect = false;
        }
        else if (userStatus == 4)
        {
            displayRooms = displayHelpNext = displayDisconnect = displayRefresh = true;
            displayExitRoom =
                    displayReconnect =
                        displayAskQuestion =
                            displayCloseRoom =
                                displayInputField =
                                    displaySendMessage =
                                        displayConnect = false;
        }
        else if (userStatus == 5)
        {
            displaySendMessage = displayInputField =displayDisconnect= displayExitRoom =true;
            displayHelpNext =
                displayRefresh =
                    displayReconnect =
                        displayAskQuestion =
                            displayCloseRoom =
                                displayConnect =
                                    displayRooms = false;
        }
        else if (userStatus == 6)
        {
            displayReconnect = true;
            displayHelpNext =
                displayRefresh =
                    displayExitRoom =
                        displayDisconnect =
                                displayAskQuestion =
                                    displayCloseRoom =
                                        displayInputField =
                                            displaySendMessage =
                                                displayConnect =
                                                    displayRooms = false;
        }
        StateHasChanged();
    }

    public async Task ConnectToRoom(string roomId)
    {
        await JSRuntime.InvokeVoidAsync("ConnectToRoomJS", roomId);
        Console.WriteLine("connect to room " + roomId);
        await FetchRoom();
        await UpdateUserStatus();
    }

    public async Task CloseChatRoom()
    {
        await JSRuntime.InvokeVoidAsync("CloseChatRoomJS");
        Console.WriteLine("CLOSE CHAT ROOM");
        await UpdateUserStatus();
    }

    public async Task ExitRoom()
    {
        await JSRuntime.InvokeVoidAsync("ExitRoomJS");
        Console.WriteLine("EXIT CHAT ROOM");
        await UpdateUserStatus();
    }

    // gets called when page is reloaded to get old connection
    public async Task CountDownRetry()
    {
        Console.WriteLine("countdown old connection");
    /*while (reconnectRetry > 0)
        {
            reconnectRetry--;
            StateHasChanged();
            await Task.Delay(450);
        }
        started = await localStorage.GetItemAsync<bool>("startedChat");
        StateHasChanged();
        if (!started)
        {
            if (currentUser.SecurityLevel == 1)
            {
                await JSRuntime.InvokeVoidAsync("ConnectUser", currentUser.id, (currentUser.FirstName + " " + currentUser.LastName));
            }
            if (currentUser.SecurityLevel == 2)
            {
                await JSRuntime.InvokeVoidAsync("ConnectAdmin", currentUser.id, (currentUser.FirstName + " " + currentUser.LastName));
            }
            started = true;
            await localStorage.SetItemAsync("startedChat", started);
        }
        await CountDownRetry();
        StateHasChanged();*/
    }

    // calls itself recursively to update user status after page initialisation
    /*public async Task GetUpdates()
    {
        Console.WriteLine("get updates  ");

    /*while (!disposed)
        {
            while (RecursiveUpdate > 0)
            {
                RecursiveUpdate--;
                StateHasChanged();
                await Task.Delay(1000);
            }
            RecursiveUpdate = 2;
            notification = await ChatService.GetUpdates(currentUser.id, currentUser.SecurityLevel == 2);
            Console.WriteLine("get updates " + update++);
            await GetUpdates();
        }#1#
    }*/

    // called on page load

    // called when user presses on connect
    private async Task ConnectToChat()
    {
        Console.WriteLine("connect to chat");
        await JSRuntime.InvokeVoidAsync("GoOnlineJS", currentUser.id, currentUser.SecurityLevel == 2, (currentUser.FirstName + " " + currentUser.LastName));
    /*Console.WriteLine(started);
        connectionId = await sessionStorage.GetItemAsync<string>(connectionCoockie);
        await FetchChat(currentUser.SecurityLevel == 2, currentUser.id);
        StateHasChanged();
        started = true;
        await localStorage.SetItemAsync("startedChat", started);*/
        await UpdateUserStatus();
        await localStorage.SetItemAsync("started", true);
    }

    // called when user press on send message
    private async Task SendMessage()
    {
        Console.WriteLine("send message");
        await JSRuntime.InvokeVoidAsync("SendMessageJS", message);
        await UpdateUserStatus();

    /*if (started)
        {
        }*/
    }

    // called on help next user
    private async Task HelpNextUser()
    {
        Console.WriteLine(" help next");

        await JSRuntime.InvokeVoidAsync("HelpNextUserJS");
        await Task.Delay(100);
        await FetchRoom();
        await UpdateUserStatus();
    }

    private async Task FetchChatRooms()
    {
        Console.WriteLine(" fetch rooms");
        chatRooms = await ChatService.GetChatRooms();
        await UpdateUserStatus();


    /*await JSRuntime.InvokeVoidAsync("HelpNextUser");*/
    }

    private async Task AskQuestion()
    {
        await JSRuntime.InvokeVoidAsync("AskQuestionJS", message);
        Console.WriteLine("ask question");
        await UpdateUserStatus();


    /*await JSRuntime.InvokeVoidAsync("HelpNextUser");*/
    }

    // called on dissconnect press
    private async Task Disconnect()
    {
        Console.WriteLine("disconnect");
        await localStorage.SetItemAsync("started", false);
        await JSRuntime.InvokeVoidAsync("DisconnectJS",currentUser.id);
        await UpdateUserStatus();

    /*await JSRuntime.InvokeVoidAsync("DisconnectJS", currentUser.id);
        connectButton = "Press To Connect";
        started = false;
        await localStorage.SetItemAsync("startedChat", started);
        StateHasChanged();*/
    }

    // called on page reload ->
    /*private async Task FetchChat(bool admin, long userId)
    {
    }*/

    // called when user leaves page
    public async void Dispose()
    {
        Console.WriteLine("Exit chat page ");
        await UpdateUserStatus();
    // disposed = true;
    }

    public async Task FetchRoom()
    {
        chatUser = await ChatService.GetUserById(currentUser.id);
        if (chatUser != null)
        {
            currentRoom = await ChatService.GetRoom(chatUser.CurrentRoom);
        }
    }

}