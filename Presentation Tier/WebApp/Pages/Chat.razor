@page "/Chat"
@using WebApp.Models
@using WebApp.Authentication
@using WebApp.Data
@using Blazored.SessionStorage
@using System.Text.Json
@attribute [Authorize]
@using Blazored.LocalStorage
@implements IDisposable;


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IJSRuntime JSRuntime
@inject ISessionStorageService sessionStorage;
@inject ILocalStorageService localStorage;
@inject IChatService ChatService;

<div class="chatPage">
    <div class="chatMessages">
                <h3>Chat</h3>
            <h4>Status: @notification</h4>
            <ul class="list-group" id="messagesList">
                @if (messages != null)
                {
                    <h3>Messages:</h3>
                    foreach (var item in messages)
                    {
                        <li class="list-group-item">@item.Sender said @item.Body</li>
                    }
                }
            </ul>
        </div>
    <AuthorizeView Policy="Admin">
        <div class="chatRooms">
            @if (displayRooms)
            {
                @if (chatRooms != null)
                {
                    <table class="table">
                        <thead class="thead-dark">
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">UserName</th>
                            <th scope="col">AdminName</th>
                            <th scope="col">Problem</th>
                            <th scope="col">Status</th>
                            <th scope="col">RoomId</th>
                            <th scope="col">Connect</th>
                            <th scope="col">Answered</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var chatRoom in chatRooms)
                        {
                            <tr>
                                <th scope="row">@chatRooms.IndexOf(chatRoom)</th>
                                <td>@chatRoom.Customer.FullName</td>
                                <td>@chatRoom.Admin.FullName</td>
                                <td>@chatRoom.Question</td>
                                <td>@chatRoom.Status</td>
                                <td>@chatRoom.Id</td>
                                <td>
                                    <button type="button" class="btn btn-success" @onclick="async () => await ConnectToRoom(chatRoom.Id)">Connect</button>
                                </td>
                                @if (chatRoom.Messages.Any())
                                {
                                    <td>@chatRoom.Messages[^1].IsAdminMessage</td>
                                }
                            </tr>
                        }
                        </tbody>

                    </table>
                }
                else
                {
                    <p>No chat rooms</p>
                }
            }
        </div>

        <div class="adminControls">
            @if (displayHelpNext)
            {
                <button @onclick="async () => await HelpNextUser()" type="button" class="button is-primary is-large is-fullwidth" display="none">Help next user</button>
            }
            @if (displayRefresh)
            {
                <button @onclick="async () => await FetchChatRooms()" type="button" class="button is-info is-large is-fullwidth" display="none">Refresh</button>
            }
            @if (displayExitRoom)
            {
                <button @onclick="async () => await ExitRoom()" type="button" class="button is-primary is-large is-warning" display="none">ExitRoom</button>
            }
        </div>


    </AuthorizeView>
    <div class="commonControls">
        @if (displayConnect)
        {
            <button type="button" class="button is-primary is-large is-fullwidth" @onclick="async () => await ConnectToChat()">Connect to chat</button>
        }
        @if (displayReconnect)
        {
            <button type="button" class="button is-primary is-large is-fullwidth" @onclick="async () => await ReconnectToChat()">Reconnect to chat</button>
        }
        @if (displayAskQuestion)
        {
            <button type="button" class="button is-primary is-large is-fullwidth" @onclick="async () => await AskQuestion()">
                Ask question
                <svg aria-hidden="true" focusable="false" data-prefix="fa-duotone" data-icon="comment-plus" class="svg-inline--fa fa-comment-plus fa-w-16 chatControls" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                    <defs>
                        <style>.fa-secondary{opacity:.4}</style>
                    </defs>
                    <g class="fa-group">
                        <path class="fa-primary" d="M360 240c0 13.26-10.74 23.1-23.1 23.1h-56v56C279.1 333.3 269.3 344 256 344c-13.27 0-23.1-10.74-23.1-23.1V263.1H175.1C162.7 263.1 152 253.3 152 240c0-13.26 10.74-23.1 23.1-23.1h56V159.1C232 146.7 242.7 136 256 136s23.1 10.74 23.1 23.1V216h56C349.3 216 360 226.7 360 240z" fill="currentColor"/><path class="fa-secondary" d="M256 32C114.6 32 .0281 125.1 .0281 240c0 49.63 21.35 94.98 56.97 130.7C44.5 421.1 2.729 466 2.229 466.5c-2.25 2.25-2.875 5.734-1.5 8.734C1.979 478.2 4.75 480 8 480c66.25 0 115.1-31.76 140.6-51.39C181.2 440.9 217.6 448 256 448c141.4 0 255.1-93.13 255.1-208S397.4 32 256 32zM336 263.1h-56v56C279.1 333.3 269.3 344 256 344c-13.27 0-23.1-10.74-23.1-23.1V263.1H175.1C162.7 263.1 152 253.3 152 240c0-13.26 10.74-23.1 23.1-23.1h56V159.1C232 146.7 242.7 136 256 136s23.1 10.74 23.1 23.1V216h56C349.3 216 360 226.7 360 240S349.3 263.1 336 263.1z" fill="currentColor"/>
                    </g>
                </svg>
            </button>
        }
        <div class="closeChat">
            @if (displayCloseRoom)
            {
                <button type="button" class="button is-danger is-large is-fullwidth" @onclick="async () => await CloseChatRoom()"> Delete chat
                    <svg aria-hidden="true" focusable="false" data-prefix="fa-duotone" data-icon="trash" class="svg-inline--fa fa-trash fa-w-14 chatControls" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                        <defs>
                            <style>.fa-secondary{opacity:.4}</style>
                        </defs>
                        <g class="fa-group">
                            <path class="fa-primary" d="M448 48V80c0 8.836-7.162 16-16 16h-416c-8.836 0-16-7.164-16-16V48c0-8.838 7.164-16 16-16H128l11.58-23.16C142.3 3.424 147.8 .0003 153.9 .0003h140.2c6.061 0 11.6 3.424 14.31 8.844L320 32h112C440.8 32 448 39.16 448 48z" fill="currentColor"/><path class="fa-secondary" d="M53.21 467c1.562 24.84 23.02 45 47.9 45h245.8c24.88 0 46.33-20.16 47.9-45L416 96H32L53.21 467z" fill="currentColor"/>
                        </g>
                    </svg>
                </button>
            }
        </div>
        <div class="inputField">
            @if (displayInputField)
            {
                <textarea class="textarea is-primary" aria-label="Message"  @bind="message"></textarea>
            }
        </div>
        <div class="sendMessage">
            @if (displaySendMessage)
            {
                <button type="button" class="button is-link is-large is-fullwidth" @onclick="async () => await SendMessage()">
                    <svg aria-hidden="true" focusable="false" data-prefix="fa-duotone" data-icon="paper-plane" class="svg-inline--fa fa-paper-plane fa-w-16 chatControls" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                        <defs>
                            <style>.fa-secondary{opacity:.4}</style>
                        </defs>
                        <g class="fa-group">
                            <path class="fa-primary" d="M416 96l-217.3 279.3C194.4 380.1 192 387.9 192 394.1L191.1 512L122.3 360.3L416 96z" fill="currentColor"/><path class="fa-secondary" d="M511.6 36.86l-64 415.1c-1.5 9.734-7.375 18.22-15.97 23.05c-4.844 2.719-10.27 4.097-15.68 4.097c-4.188 0-8.319-.8154-12.29-2.472l-122.6-51.1L191.1 512L192 394.1c0-7.115 2.372-14.03 6.742-19.64L416 96l-293.7 264.3L19.69 317.5C8.438 312.8 .8125 302.2 .0625 289.1s5.469-23.72 16.06-29.77l448-255.1c10.69-6.109 23.88-5.547 34 1.406S513.5 24.72 511.6 36.86z" fill="currentColor"/>
                        </g>
                    </svg>
                </button>
            }
        </div>
        <div class="disconnect">
            @if (displayDisconnect)
            {
                <button type="button" class="button is-warning is-large is-fullwidth" @onclick="async () => await Disconnect()"> Disconnect
                    <svg aria-hidden="true" focusable="false" data-prefix="fa-duotone" data-icon="circle-xmark" class="svg-inline--fa fa-circle-xmark fa-w-16 chatControls" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                        <defs>
                            <style>.fa-secondary{opacity:.4}</style>
                        </defs>
                        <g class="fa-group">
                            <path class="fa-primary" d="M289.9 255.1l47.03-47.03c9.375-9.375 9.375-24.56 0-33.94s-24.56-9.375-33.94 0L256 222.1L208.1 175c-9.375-9.375-24.56-9.375-33.94 0s-9.375 24.56 0 33.94l47.03 47.03L175 303c-9.375 9.375-9.375 24.56 0 33.94c9.373 9.373 24.56 9.381 33.94 0L256 289.9l47.03 47.03c9.373 9.373 24.56 9.381 33.94 0c9.375-9.375 9.375-24.56 0-33.94L289.9 255.1z" fill="currentColor"/><path class="fa-secondary" d="M256 0C114.6 0 0 114.6 0 256s114.6 256 256 256C397.4 512 512 397.4 512 256S397.4 0 256 0zM336.1 303c9.375 9.375 9.375 24.56 0 33.94c-9.381 9.381-24.56 9.373-33.94 0L256 289.9l-47.03 47.03c-9.381 9.381-24.56 9.373-33.94 0c-9.375-9.375-9.375-24.56 0-33.94l47.03-47.03L175 208.1c-9.375-9.375-9.375-24.56 0-33.94s24.56-9.375 33.94 0L256 222.1l47.03-47.03c9.375-9.375 24.56-9.375 33.94 0s9.375 24.56 0 33.94l-47.03 47.03L336.1 303z" fill="currentColor"/>
                        </g>
                    </svg>
                </button>
            }
        </div>
    </div>
</div>

@code {

    User currentUser;
    private string message;
    private string notification = "None";
    IList<Message> messages = null;
    IList<ChatRoom> chatRooms = null;
    ChatUser chatUser;
    ChatRoom currentRoom;
    private int userStatus;
    private bool displayHelpNext;
    private bool displayRefresh;
    private bool displayExitRoom;
    private bool displayConnect;
    private bool displayReconnect;
    private bool displayDisconnect;
    private bool displayAskQuestion;
    private bool displayCloseRoom;
    private bool displaySendMessage;
    private bool displayInputField;
    private bool displayRooms;
    private int updateStatusDelay = 1; // in 100 msseconds => 10 = 1 second = 1000ms


    protected override async Task OnInitializedAsync()
    {
        currentUser = await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).GetUser();
        await JSRuntime.InvokeVoidAsync("EstablishConnection");
        if (await localStorage.GetItemAsync<bool>("started"))
        {
            await ReconnectToChat();
        }
        await UpdateUserStatus();
        StateHasChanged();
    }

    public async Task ClearChat()
    {
        await JSRuntime.InvokeVoidAsync("ClearChatJS");
    }
    public async Task ReconnectToChat()
    {
        await JSRuntime.InvokeVoidAsync("ReconnectToChatJS", currentUser.id);
        await FetchRoom();
        await UpdateUserStatus();
    }

    public async Task UpdateUserStatus()
    {
        while (updateStatusDelay > 0)
        {
            updateStatusDelay--;
            await Task.Delay(100);
        }
        userStatus = await ChatService.GetUserStatus(currentUser.id);
        await UpdateUI();
        updateStatusDelay = 1;
    }
    
    public async Task UpdateUI()
    {
        if (userStatus == 0)
        {
            notification = "You are not connected, press connect to start";
            displayHelpNext =
                displayRefresh =
                    displayExitRoom =
                        displayReconnect =
                            displayDisconnect =
                                displayAskQuestion =
                                    displayCloseRoom =
                                        displayInputField =
                                            displaySendMessage = false;
            displayConnect = true;
        }
        else if (userStatus == 1)
        {
            notification = "You are connected, ask a question to start chatting";

            displayAskQuestion = displayInputField = displayDisconnect = true;
            displayHelpNext =
                displayRefresh =
                    displayExitRoom =
                        displayReconnect =
                            displayCloseRoom =
                                displaySendMessage =
                                    displayConnect = false;
        }
        else if (userStatus == 2)
        {
            notification = "You are waiting in the queue";
            displaySendMessage = displayInputField = displayDisconnect = displayCloseRoom = true;
            displayHelpNext =
                displayRefresh =
                    displayExitRoom =
                        displayReconnect =
                            displayConnect =
                                displayAskQuestion = false;
        }
        else if (userStatus == 3)
        {
            notification = "You were disconnected, please reconnect";
            displayReconnect = true;
            displayHelpNext =
                displayRefresh =
                    displayExitRoom =
                        displayDisconnect =
                            displayAskQuestion =
                                displayCloseRoom =
                                    displayInputField =
                                        displaySendMessage =
                                            displayConnect = false;
        }
        else if (userStatus == 4)
        {
            notification = "You are connected, press refresh to check if there are any users waiting for help";
            displayRooms = displayHelpNext = displayDisconnect = displayRefresh = true;
            displayExitRoom =
                displayReconnect =
                    displayAskQuestion =
                        displayCloseRoom =
                            displayInputField =
                                displaySendMessage =
                                    displayConnect = false;
        }
        else if (userStatus == 5)
        {
            notification = "You are connected, you your best to help our customer";
            displaySendMessage = displayInputField = displayDisconnect = displayExitRoom = true;
            displayHelpNext =
                displayRefresh =
                    displayReconnect =
                        displayAskQuestion =
                            displayCloseRoom =
                                displayConnect =
                                    displayRooms = false;
        }
        else if (userStatus == 6)
        {
            notification = "You were disconnected, please reconnect";
            displayReconnect = true;
            displayHelpNext =
                displayRefresh =
                    displayExitRoom =
                        displayDisconnect =
                            displayAskQuestion =
                                displayCloseRoom =
                                    displayInputField =
                                        displaySendMessage =
                                            displayConnect =
                                                displayRooms = false;
        }
        StateHasChanged();
    }

    public async Task ConnectToRoom(string roomId)
    {
        await ClearChat();
        await JSRuntime.InvokeVoidAsync("ConnectToRoomJS", roomId);
        await FetchRoom();
        await UpdateUserStatus();
    }

    public async Task CloseChatRoom()
    {
        await JSRuntime.InvokeVoidAsync("CloseChatRoomJS");
        await UpdateUserStatus();
        await ClearChat();

    }

    public async Task ExitRoom()
    {
        await JSRuntime.InvokeVoidAsync("ExitRoomJS");
        await UpdateUserStatus();

    }
    

    // called when user presses on connect
    private async Task ConnectToChat()
    {
        await JSRuntime.InvokeVoidAsync("GoOnlineJS", currentUser.id, currentUser.SecurityLevel == 2, (currentUser.FirstName + " " + currentUser.LastName));
        await UpdateUserStatus();
        await localStorage.SetItemAsync("started", true);

    }

    // called when user press on send message
    private async Task SendMessage()
    {
        
        await JSRuntime.InvokeVoidAsync("SendMessageJS", message);
        await UpdateUserStatus();
        message = "";

    }

    // called on help next user
    private async Task HelpNextUser()
    {
        await JSRuntime.InvokeVoidAsync("HelpNextUserJS");
        await Task.Delay(100);
        await FetchRoom();
        await UpdateUserStatus();
    }

    private async Task FetchChatRooms()
    {
        chatRooms = await ChatService.GetChatRooms();
        await UpdateUserStatus();

    }

    private async Task AskQuestion()
    {

            await JSRuntime.InvokeVoidAsync("AskQuestionJS", message);
            await UpdateUserStatus();
            message = "";
    }

    // called on dissconnect press
    private async Task Disconnect()
    {
        await localStorage.SetItemAsync("started", false);
        await JSRuntime.InvokeVoidAsync("DisconnectJS", currentUser.id);
        await UpdateUserStatus();
        await ClearChat();
        
    }
    
    public async void Dispose()
    {
        await UpdateUserStatus();
    }

    public async Task FetchRoom()
    {
        await Task.Delay(100);
        chatUser = await ChatService.GetUserById(currentUser.id);
        if (chatUser != null)
        {
            currentRoom = await ChatService.GetRoom(chatUser.CurrentRoom);
            if (currentRoom != null)
            {
                messages = JsonSerializer.Deserialize<IList<Message>>(JsonSerializer.Serialize(currentRoom.Messages));
            }
        }
        StateHasChanged();

    }

}