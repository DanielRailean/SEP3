@page "/Chat"
@using WebApp.Models
@using WebApp.Authentication
@using WebApp.Data
@using Blazored.SessionStorage
@using System.Text.Json
@attribute [Authorize]
@using Blazored.LocalStorage


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IJSRuntime JSRuntime
@inject ISessionStorageService sessionStorage;
@inject ILocalStorageService localStorage;
@inject IChatService ChatService;

<h3>Chat</h3>
<div class="container">
    <div class="row">
        <div class="col-2">Message</div>
    </div>
    @if (messages != null)
    {
        foreach (var item in messages)
        {
            <p>@item.Body</p>
        }
    }
    else
    {
        <p>No previous messages</p>
    }
    
    @if (chatRooms!=null&&!started)
    {
        foreach (var chatRoom in chatRooms)
        {
            <div class="chatRoom">
                    <p>@chatRoom.Admin.FullName</p>
                    <p>@chatRoom.Customer.FullName</p>
                    <p>@chatRoom.Status</p>
                </div>
        }

    }
    else
    {
        <p>No rooms</p>
    }
    <p id="notification">@notification</p>
    <div class="row">
        @if (currentUser.SecurityLevel == 2)
        {
            <button @onclick="() => HelpNext()" type="button" class="btn btn-primary" display="none">Help next user</button>
        }
        <div class="col-4"><input type="text" id="messageInput" @bind="@message"/></div>
        <div class="col-4">
            <button type="button" class="btn btn-primary" @onclick="async () => await SendMessage()">@ButtonValue</button>
        </div>

        @if (started)
        {
            <div class="col-4">
                <button type="button" class="btn btn-warning" @onclick="async () => await Disconnect()">Disconnect</button>
            </div>
        }
        else
        {
            <div class="col-4">
                <button type="button" class="@ButtonClass" @onclick="async () => await ConnectToChat()" id="connectButton">@connectButton</button>
            </div>
        }

        @*<button @onclick="() => countdownAutoStart()" type="button" class="@ButtonClass" display="none">@ButtonValue</button>*@
    </div>

</div>
<div class="row">
    <div class="col-12">
        <hr />
    </div>
</div>
<div class="row">
    <div class="col-6">
        <ul id="messagesList"></ul>
    </div>
</div>


@code {
    public int Time = 1;
    public int Time2 = 1;
    User currentUser = new User();
    private string connectionCoockie = "connectionC";
    private string connectionId;
    private string message;
    private string notification;
    private string ButtonValue;
    private string connectButton = "Press To Connect";
    private string ButtonClass = "btn btn-success";
    private ChatRoom room;
    IList<Message> messages = null;
    IList<ChatRoom> chatRooms = null;
    private bool started;
    private bool isBusy;

    public async Task CountDownRetry()
    {
        while (Time > 0)
        {
            Time--;
            StateHasChanged();
            await Task.Delay(450);
        }
        started = await localStorage.GetItemAsync<bool>("startedChat");
        StateHasChanged();
        if(!started){
            if (currentUser.SecurityLevel == 1)
            {
                await JSRuntime.InvokeVoidAsync("ConnectUser", currentUser.id,(currentUser.FirstName+" "+currentUser.LastName));
            }
            if (currentUser.SecurityLevel == 2)
            {
                await JSRuntime.InvokeVoidAsync("ConnectAdmin", currentUser.id,(currentUser.FirstName+" "+currentUser.LastName));
            }
            await localStorage.SetItemAsync("startedChat", true);
        }
        started = true;
        /*connectButton = "connected";
        ButtonClass  = "btn btn-success";*/
    StateHasChanged();
    }
    /*
    public async Task CountdownFetchChat(bool admin)
    {
        while (Time2 > 0)
        {
            Time2--;
            StateHasChanged();
            await Task.Delay(1000);
        }
        await FetchChat(admin);
        ButtonClass = "btn btn-primary";
        ButtonValue = "Connected";
        isChatting = true;

    }
    */

    protected override async Task OnInitializedAsync()
    {
        currentUser = await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).GetUser();
        await JSRuntime.InvokeVoidAsync("start");
        if (currentUser.SecurityLevel == 2)
        {
            ButtonValue = "Send message";
            chatRooms = await ChatService.GetChatRooms();
            if (chatRooms != null)
            {
                Console.WriteLine("got rooms");
                Console.WriteLine(JsonSerializer.Serialize(chatRooms));
            }
            StateHasChanged();
        }
        else
        {
            ButtonValue = "Ask question";
        }
        started = await localStorage.GetItemAsync<bool>("startedChat");
        if (started)
        {
            ConnectToChat();
        }
        StateHasChanged();
    }

    private async Task ConnectToChat(){
        Console.WriteLine(started);
        connectionId = await sessionStorage.GetItemAsync<string>(connectionCoockie);
        await JSRuntime.InvokeVoidAsync("GoOnlineJS",currentUser.id,currentUser.SecurityLevel==2,(currentUser.FirstName+" "+currentUser.LastName),connectionId);
        await FetchChat(currentUser.SecurityLevel==2);
        if (!started)
        {
            CountDownRetry();
        }
        StateHasChanged();


    }

    private async Task SendMessage()
    {
        CountDownRetry();
        if(started)
        {
            await JSRuntime.InvokeVoidAsync("sendMessage", currentUser.id,currentUser.SecurityLevel==2,message,(currentUser.FirstName+" "+currentUser.LastName));
            
        }
        if (currentUser.SecurityLevel == 2)
        {
            chatRooms = await ChatService.GetChatRooms();
        }
    }

    private async Task HelpNext()
    {
        await JSRuntime.InvokeVoidAsync("HelpNextUser");
    }

    private async Task Disconnect()
    {
        await localStorage.SetItemAsync("startedChat", false);
        await JSRuntime.InvokeVoidAsync("DisconnectJS",currentUser.id);
        started = false;
        connectButton = "Press To Connect";
        StateHasChanged();
    }

    private async Task FetchChat(bool admin)
    {
        await sessionStorage.SetItemAsync("isAdmin", admin);
    }

}