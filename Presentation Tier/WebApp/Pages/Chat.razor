@page "/Chat"
@using WebApp.Models
@using WebApp.Authentication
@using WebApp.Data
@using Blazored.SessionStorage
@using System.Text.Json
@using System.Timers
@attribute [Authorize]
@using Blazored.LocalStorage
@implements IDisposable;


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IJSRuntime JSRuntime
@inject ISessionStorageService sessionStorage;
@inject ILocalStorageService localStorage;
@inject IChatService ChatService;

<h3>Chat</h3>
<div class="container">
    <div class="row">
        <div class="col-2">Messages</div>
    </div>
    @if (messages != null)
    {
        foreach (var item in messages)
        {
            <p>@item.Body</p>
        }
    }
    <AuthorizeView Policy="Admin">
        <button type="button" class="btn-dark" @onclick="async () => await UpdateRooms()">Update rooms</button>
        @if (chatRooms != null)
        {
            <table class="table">
                <thead class="thead-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">UserName</th>
                    <th scope="col">AdminName</th>
                    <th scope="col">Problem</th>
                    <th scope="col">Last Message</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var chatRoom in chatRooms)
                {
                    <tr>
                        <th scope="row">@chatRooms.IndexOf(chatRoom)</th>
                        <td>@chatRoom.Customer.FullName</td>
                        <td>@chatRoom.Admin.FullName</td>
                        <td>@chatRoom.Status</td>
                        @if (chatRoom.Messages.Any())
                        {
                            <td>@chatRoom.Messages[^1].Timestamp</td>
                        }
                    </tr>
                }
                </tbody>

            </table>
        }
        else
        {
            <p>No chat rooms</p>
        }

    </AuthorizeView>
    <p id="notification">@notification</p>
    <div class="row">
        @if (currentUser.SecurityLevel == 2)
        {
            <button @onclick="() => HelpNext()" type="button" class="btn btn-primary" display="none">Help next user</button>
        }
        <div class="col-4"><input type="text" id="messageInput" @bind="@message"/></div>
        <div class="col-4">
            <button type="button" class="btn btn-primary" @onclick="async () => await SendMessage()">@ButtonValue</button>
        </div>
        
        @if (started)
        {
            <div class="col-4">
                <button type="button" class="btn btn-warning" @onclick="async () => await Disconnect()">Disconnect</button>
            </div>
        }
        else
        {
            <div class="col-4">
                <button type="button" class="@ButtonClass" @onclick="async () => await ConnectToChat()" id="connectButton">@connectButton</button>
            </div>
        }

        @*<button @onclick="() => countdownAutoStart()" type="button" class="@ButtonClass" display="none">@ButtonValue</button>*@
    </div>

</div>
<div class="row">
    <div class="col-12">
        <hr />
    </div>
</div>
<div class="row">
    <div class="col-6">
        <ul id="messagesList"></ul>
    </div>
</div>


@code {
    public int Time = 1;
    public int Time2 = 1;
    public int update;
    User currentUser = new User();
    private string connectionCoockie = "connectionC";
    private string connectionId;
    private string message;
    private string notification;
    private string ButtonValue;
    private string connectButton = "Press To Connect";
    private string ButtonClass = "btn btn-success";
    private ChatRoom room;
    IList<Message> messages = null;
    IList<ChatRoom> chatRooms = null;
    private bool started;
    private bool isBusy;
    private int updatesCount;
    private int temp;
    private bool disposed;
    
    public async Task CountDownRetry()
    {
        while (Time > 0)
        {
            Time--;
            StateHasChanged();
            await Task.Delay(450);
        }
        started = await localStorage.GetItemAsync<bool>("startedChat");
        StateHasChanged();
        if(!started){
            if (currentUser.SecurityLevel == 1)
            {
                await JSRuntime.InvokeVoidAsync("ConnectUser", currentUser.id,(currentUser.FirstName+" "+currentUser.LastName));
            }
            if (currentUser.SecurityLevel == 2)
            {
                await JSRuntime.InvokeVoidAsync("ConnectAdmin", currentUser.id,(currentUser.FirstName+" "+currentUser.LastName));
            }
            started = true;
            await localStorage.SetItemAsync("startedChat", started);
        }
    /*connectButton = "connected";
        ButtonClass  = "btn btn-success";*/
    StateHasChanged();
    }

    public async Task GetUpdates()
    {
        while (!disposed)
        {
            while (Time2 > 0)
            {
                Time2--;
                StateHasChanged();
                await Task.Delay(1000);
            }
            Time2 = 2;
            notification = await ChatService.GetUpdates(currentUser.id, currentUser.SecurityLevel == 2);
            Console.WriteLine("get updates "+update++);
            await GetUpdates();
        }
    }
    /*
    public async Task CountdownFetchChat(bool admin)
    {
        while (Time2 > 0)
        {
            Time2--;
            StateHasChanged();
            await Task.Delay(1000);
        }
        await FetchChat(admin);
        ButtonClass = "btn btn-primary";
        ButtonValue = "Connected";
        isChatting = true;

    }
    */

    protected override async Task OnInitializedAsync()
    {
        GetUpdates();
        started = await localStorage.GetItemAsync<bool>("startedChat");
        currentUser = await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).GetUser();
        await JSRuntime.InvokeVoidAsync("start");
        if (currentUser.SecurityLevel == 2&&!started)
        {
            ButtonValue = "Send message";
            chatRooms = await ChatService.GetChatRooms();
            if (chatRooms != null)
            {
                Console.WriteLine("got rooms");
                Console.WriteLine(JsonSerializer.Serialize(chatRooms));
            }
            StateHasChanged();
        }
        else
        {
            ButtonValue = "Ask question";
        }
        if(started)
        {
            await JSRuntime.InvokeVoidAsync("ReconnectJS", currentUser.id, currentUser.SecurityLevel == 2);
            await ConnectToChat();
            CountDownRetry();
        }
        StateHasChanged();
    }

    private async Task ConnectToChat(){
        Console.WriteLine(started);
        connectionId = await sessionStorage.GetItemAsync<string>(connectionCoockie);
        await JSRuntime.InvokeVoidAsync("GoOnlineJS",currentUser.id,currentUser.SecurityLevel==2,(currentUser.FirstName+" "+currentUser.LastName),connectionId);
        await FetchChat(currentUser.SecurityLevel==2,currentUser.id);
        StateHasChanged();
        started = true;
        await localStorage.SetItemAsync("startedChat", started);

    }

    private async Task SendMessage()
    {
        if(started)
        {
            await JSRuntime.InvokeVoidAsync("sendMessage", currentUser.id,currentUser.SecurityLevel==2,message,(currentUser.FirstName+" "+currentUser.LastName));
            
        }
    }

    private async Task HelpNext()
    {
        await JSRuntime.InvokeVoidAsync("HelpNextUser");
    }

    private async Task UpdateRooms()
    {
        if (currentUser.SecurityLevel == 2)
        {
            chatRooms = await ChatService.GetChatRooms();
        }
    }

    private async Task Disconnect()
    {
        
        await JSRuntime.InvokeVoidAsync("DisconnectJS",currentUser.id);
        connectButton = "Press To Connect";
        started = false;
        await localStorage.SetItemAsync("startedChat", started);
        StateHasChanged();
        
    }

    private async Task FetchChat(bool admin,long userId)
    {
        await sessionStorage.SetItemAsync("isAdmin", admin);
        await sessionStorage.SetItemAsync("userId", userId);
    }

    public void Dispose()
    {
        Console.WriteLine("DISPOSED");
        disposed = true;
    }

}