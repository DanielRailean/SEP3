@page "/myorders/{user}"
@using WebApp.Models
@using WebApp.Data

@inject NavigationManager NavigationManager
@inject IOrderService OrderService

<h3>My Orders</h3>
<p> 
    Filter by Date: <input type="number" @oninput="@(arg => FilterByDate(arg))" style="width: 50px"/>
</p>
<p> 
    Filter by Cost: <input type="text" @oninput="@(arg => FilterByCost(arg))" style="width: 150px"/>
</p>
<p> 
    Filter by Shipped: <input type="text" @oninput="@(arg => FilterByShipped(arg))" style="width: 150px"/>
</p>

@if (ordersToShow == null)
    {
    <p>
        <em>Loading...</em>
    </p>
    } 
    else if (!ordersToShow.Any())
    {
        <p>
            <em>No orders.</em>
        </p>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th>Date</th>
                <th>Cost</th>
                <th>Shipped</th>
                <th>Amount of recipes</th>
                <th>Remove</th>
                <th>Edit</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in ordersToShow)
            {
                <tr>
                    <td>@item.OrderDate</td>
                    <td>@item.DeliveryPrice</td>
                    <td>@item.IsShipped</td>
                    <td>@item.Recipes.Count</td>
                    <td>
                        <AuthorizeView>
                            <NotAuthorized>
                                <button @onclick="@(() => RemoveOrder(item))" disabled>
                                    <i class="oi oi-trash" style="color: red"/>
                                </button>
                            </NotAuthorized>
                            <Authorized>
                                <button @onclick="@(() => RemoveOrder(item))">
                                    <i class="oi oi-trash" style="color: red"/>
                                </button>
                            </Authorized>
                        </AuthorizeView>
                    </td>
                    <td>
                        <AuthorizeView>
                            <NotAuthorized>
                                <button @onclick="@(() => EditOrder(item.Id))" disabled>
                                    <i class="oi oi-pencil" style="color: #1b6ec2"/>
                                </button>
                            </NotAuthorized>
                            <Authorized>
                                <button @onclick="@(() => EditOrder(item.Id))">
                                    <i class="oi oi-pencil" style="color: #1b6ec2"/>
                                </button>
                            </Authorized>
                        </AuthorizeView>
                    </td>

                </tr>
            }
            </tbody>
        </table>
    }
@code {
    private IList<Order> allOrders;
    private IList<Order> ordersToShow;

    private DateTime? filterByDate;
    private double? filterByCost;
    private bool? filterByShipped;

    protected override async Task OnInitializedAsync()
    {
        allOrders = await OrderService.GetAllOrdersAsync();
        ordersToShow = allOrders;
    }
    
    private void FilterByDate(ChangeEventArgs changeEventArgs)
    {
        filterByDate = null;
        try
        {
            filterByDate = DateTime.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        ExecuteFilter();
    }
    
    private void FilterByCost(ChangeEventArgs changeEventArgs)
    {
        filterByCost = null;
        try
        {
            filterByCost = double.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        ExecuteFilter();
    }
    
    private void FilterByShipped(ChangeEventArgs changeEventArgs)
    {
        filterByShipped = null;
        try
        {
            filterByShipped = Boolean.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        ordersToShow = allOrders.Where(t => 
            (filterByDate != null && t.OrderDate == filterByDate || filterByDate == null) &&
            (filterByCost != null && t.TotalPrice == filterByCost || filterByCost == null) && 
            (filterByShipped != null && t.IsShipped == filterByShipped || filterByShipped == null)
            ).ToList();
    }

    private void EditOrder(int id)
    {
        NavigationManager.NavigateTo($"EditOrder/{id}");
    }

    private void RemoveOrder(Order order)
    {
        Order orderToRemove = allOrders.First(t => t.Id == order.Id);
        OrderService.RemoveOrderAsync(order);
        allOrders.Remove(orderToRemove);
        ordersToShow.Remove(orderToRemove);
    }
}