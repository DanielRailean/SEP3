@page "/basket"
@using WebApp.Data
@using WebApp.Models
@using MudBlazor
@using global::Models

@inject IBasketService BasketService
@inject NavigationManager NavigationManager

<h3>Basket</h3>
@if (recipesInBasket == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else if (!recipesInBasket.Any())
{
    <p>
        <em>Nothing in basket.</em>
    </p>
}
else
{
    <MudTable Items="@recipesInBasket" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Amount</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Price (DKK)</MudTh>
            <MudTh>Remove</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Amount">@context.Amount</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Price">@context.Price</MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="() => RemoveBasketItem(context)">X</MudButton>
                </MudTd>
        </RowTemplate>
        <FooterContent>
            <MudTd DataLabel="Total amount">Total amounts of recipes in the basket: @totalAmount</MudTd>
            <MudTd DataLabel="Total price"> Total to pay (excluding shipment): @totalPrice DKK</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="() => FinalizeBasket()">Next</MudButton>
            </MudTd>
        </FooterContent>
    </MudTable>
}

@code {
    private IList<Recipe> recipesInBasket = new List<Recipe>();
    private IList<BasketItem> itemsInBasket = new List<BasketItem>();
    private int? totalAmount;
    private double? totalPrice;

    protected override async Task OnInitializedAsync()
    {
        itemsInBasket = await BasketService.GetAllBasketItems();
        recipesInBasket = await BasketService.GetAllBasketRecipes();
        CalculateTotalPrice();
        CalculateTotalAmount();
    }

    private async void RemoveBasketItem(Recipe recipe)
    {
        await BasketService.RemoveRecipe(recipe);
    }

    private void CalculateTotalPrice()
    {
        totalPrice = 0;
        foreach (var item in recipesInBasket)
        {
            totalPrice += item.Price * item.Amount;
        }
    }

    private void CalculateTotalAmount()
    {
        totalAmount = 0;
        foreach (var item in recipesInBasket)
        {
            totalAmount += item.Amount;
        }
    }

    private void FinalizeBasket()
    {
        NavigationManager.NavigateTo("/orderfinal");
    }
}