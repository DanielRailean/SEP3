@*@page "/userchat"
@attribute [Authorize(Policy = "Customer")]

@inject NavigationManager navigationManager

<h3>Chat</h3>
<hr />

@if (!isChatting)
{
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="@username" />
    <button type="button" @onclick=""><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

    // Error messages
    @if (message != null)
    {
        <div class="invalid-feedback">@message</div>
        <small id="emailHelp" class="form-text text-muted">@message</small>
    }
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="">Disconnect</button>
    </div>
    // display messages
    <div id="scrollbox">
        @#1#foreach (var item in messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }#1#
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@newMessage"></textarea>
        <button class="btn btn-default" @onclick="@()">Send</button>
    </div>
}

@code {
    // flag to indicate chat status
    private bool isChatting = false;

    // name of the user who will be chatting
    private string username;

    // on-screen message
    private string message;

    // new message input
    private string newMessage;

    // list of messages in chat
    /*private List<Message> messages = new List<Message>();*/

    private string hubUrl;


}*@